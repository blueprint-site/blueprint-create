// src/types/index.ts

// Re-export types from Addon schema
import {
  Addon,
  ModrinthAddon,
  CurseForgeAddon,
  Screenshot,
  Links,
  Category,
  Author,
  Logo,
  Hash,
  SortableGameVersion,
  Dependency,
  Module,
  LatestFilesIndex,
  SocialLink,
  ServerAffiliation,
  LatestFile,
} from '@/schemas/addon.schema';

export type {
  Addon,
  Screenshot,
  Links,
  Category,
  Author,
  Logo,
  Hash,
  SortableGameVersion,
  Dependency,
  Module,
  LatestFilesIndex,
  SocialLink,
  ServerAffiliation,
  LatestFile,
  CurseForgeAddon,
  ModrinthAddon,
};

// Re-export types from Schematic schema
import {
  Schematic,
  SchematicFormValues,
  PartialSchematic,
  CreateSchematic,
  SearchSchematicsResult
} from '@/schemas/schematic.schema';

export type {
  Schematic,
  SchematicFormValues,
  PartialSchematic,
  CreateSchematic,
  SearchSchematicsResult
};

// Re-export types from Blog schema
import {
  Blog,
  Tag,
  CreateBlogInput,
  UpdateBlogInput,
  BlogFilter
} from '@/schemas/blog.schema';

export type {
  Blog,
  Tag,
  CreateBlogInput,
  UpdateBlogInput,
  BlogFilter
};

// Re-export types from User schema
import {
  User,
  UserPreferences,
  Target,
  CreateUserInput,
  UpdateUserProfileInput,
  UpdateUserPreferencesInput
} from '@/schemas/user.schema';

export type {
  User,
  UserPreferences,
  Target,
  CreateUserInput,
  UpdateUserProfileInput,
  UpdateUserPreferencesInput
};

// Re-export GitHub related types
import {
  GitHubUser,
  ContributorStats,
  GitHubRepo,
  GitHubContributorsResponse
} from '@/schemas/github.schema';

export type {
  GitHubUser,
  ContributorStats,
  GitHubRepo,
  GitHubContributorsResponse
};


// Interface for the schematic feature
export interface Schematic {
  $id: string; // Autogenerated uuid for the schematic
  $createdAt: string;
  $updatedAt: string;
  title: string; // Schematic's title
  description: string; // Schematic's description
  schematic_url: string; // Supabase bucket file url for .nbt
  image_urls: string[] // Supabase bucket file url for .png
  authors: string[]; // Authors of a schematic
  user_id: string;
  downloads: number; // User who was uploading id
  likes: number;
  game_versions: string[]; // What game versions is it for
  create_versions: string[]; // What create versions is it for
  modloaders: string[]; // What modloaders is it for
  categories: string[]; // What categories does it fall into
  slug: string; // Slug used for identification
  status: string;
}
// Interface for the blog feature
export interface BlogType {
  $id: string;
  title: string;
  content: string;
  slug: string;
  img_url: string;
  status: string;
  links?: JSON;
  tags: Tag[];
  likes: number;
  authors_uuid: string[];
  authors: string[];
  created_at: string;
}
export interface Tag {
  id: string;
  value: string;
  color: string;
}

// Admin logs interface
export interface Admin_logs {
  id: string;
  type: string;
  content: string;
  category: string;
  created_at: string;
  user_uuid: string;
}

// LoggedUserContext type
export interface LoggedUserContextType {
  user: User | null;
  preferences: UserPreferences | null;
  error: string | null;

  // User preferences management
  updatePreferences: (prefs: UserPreferences) => Promise<void>;

  // Email/password authentication
  register: (name: string, email: string, password: string) => Promise<void>;
  login: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;

  // OAuth authentication
  handleOAuthLogin: (provider: 'google' | 'github' | 'discord') => void;
  handleOAuthCallback: () => Promise<void>;

  // Error management
  setError: (error: string | null) => void;
}

// Search interfaces
export interface SearchSchematicsProps {
  query?: string;
  page?: number;
  category?: string;
  subCategory?: string;
  version?: string;
  loaders?: string;
  id?: string;
}
